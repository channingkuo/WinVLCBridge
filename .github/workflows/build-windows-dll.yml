name: Build WinVLCBridge DLL

on:
  push:
    branches: [ master, main ]
    paths:
      - 'WinVLCBridge/**'
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout 代码
      uses: actions/checkout@v4
      
    - name: 设置 MSBuild
      uses: microsoft/setup-msbuild@v2
      
    - name: 下载 VLC SDK
      run: |
        [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        $ProgressPreference = 'SilentlyContinue'
        
        $VLC_VERSION = "3.0.20"
        $NUGET_URL = "https://www.nuget.org/api/v2/package/VideoLAN.LibVLC.Windows/$VLC_VERSION"
        $TARGET_DIR = "WinVLCBridge/vlc-3.0.21"
        
        Write-Host "=========================================="
        Write-Host "VLC SDK Setup Script"
        Write-Host "=========================================="
        Write-Host ""
        
        # Check if SDK already exists
        if (Test-Path "$TARGET_DIR/sdk") {
          Write-Host "VLC SDK already exists, skipping download"
          exit 0
        }
        
        Write-Host "Step 1: Downloading VLC SDK (NuGet package)..."
        Invoke-WebRequest -Uri $NUGET_URL -OutFile "libvlc.zip"
        
        Write-Host ""
        Write-Host "Step 2: Extracting..."
        Expand-Archive -Path "libvlc.zip" -DestinationPath "libvlc-nuget" -Force
        
        Write-Host ""
        Write-Host "Step 3: Checking NuGet package structure..."
        Get-ChildItem -Path "libvlc-nuget" -Recurse -Depth 2 | Select-Object FullName | Format-Table -AutoSize
        
        Write-Host ""
        Write-Host "Step 4: Creating directory structure..."
        New-Item -ItemType Directory -Force -Path "$TARGET_DIR/sdk/include" | Out-Null
        New-Item -ItemType Directory -Force -Path "$TARGET_DIR/sdk/lib" | Out-Null
        
        Write-Host ""
        Write-Host "Step 5: Copying header files..."
        if (Test-Path "libvlc-nuget/build/native/include") {
          Copy-Item -Recurse -Force "libvlc-nuget/build/native/include/*" "$TARGET_DIR/sdk/include/"
        } elseif (Test-Path "libvlc-nuget/build/x64/include") {
          Copy-Item -Recurse -Force "libvlc-nuget/build/x64/include/*" "$TARGET_DIR/sdk/include/"
        } else {
          Write-Error "Cannot find include directory in NuGet package"
          exit 1
        }
        
        Write-Host ""
        Write-Host "Step 6: Copying library files..."
        $libPath = ""
        if (Test-Path "libvlc-nuget/build/x64") {
          $libPath = "libvlc-nuget/build/x64"
        } elseif (Test-Path "libvlc-nuget/build/win-x64") {
          $libPath = "libvlc-nuget/build/win-x64"
        } else {
          Write-Error "Cannot find x64 build directory in NuGet package"
          exit 1
        }
        
        Copy-Item -Force "$libPath/libvlc.lib" "$TARGET_DIR/sdk/lib/" -ErrorAction SilentlyContinue
        Copy-Item -Force "$libPath/libvlccore.lib" "$TARGET_DIR/sdk/lib/" -ErrorAction SilentlyContinue
        
        Write-Host ""
        Write-Host "Step 7: Copying DLL and plugins..."
        Copy-Item -Force "$libPath/*.dll" "$TARGET_DIR/" -ErrorAction SilentlyContinue
        if (Test-Path "$libPath/plugins") {
          Copy-Item -Recurse -Force "$libPath/plugins" "$TARGET_DIR/"
        }
        
        Write-Host ""
        Write-Host "Step 8: Cleaning up temporary files..."
        Remove-Item -Recurse -Force "libvlc-nuget", "libvlc.zip"
        
        Write-Host ""
        Write-Host "=========================================="
        Write-Host "VLC SDK setup completed successfully!"
        Write-Host "=========================================="
        Write-Host ""
        Write-Host "Verifying SDK structure..."
        if (Test-Path "$TARGET_DIR/sdk/include") { Write-Host "  [OK] Include directory" }
        if (Test-Path "$TARGET_DIR/sdk/lib") { Write-Host "  [OK] Lib directory" }
        if (Test-Path "$TARGET_DIR/libvlc.dll") { Write-Host "  [OK] libvlc.dll" }
        if (Test-Path "$TARGET_DIR/libvlccore.dll") { Write-Host "  [OK] libvlccore.dll" }
        if (Test-Path "$TARGET_DIR/plugins") { Write-Host "  [OK] Plugins directory" }
        Write-Host ""
      shell: powershell
      
    - name: 配置 CMake
      run: |
        cd WinVLCBridge
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64
        
    - name: 编译 Release 版本
      run: |
        cd WinVLCBridge/build
        cmake --build . --config Release --verbose
        
    - name: 验证编译输出
      run: |
        if (Test-Path "WinVLCBridge/build/bin/Release/WinVLCBridge.dll") {
          Write-Host "✅ WinVLCBridge.dll 编译成功"
          Get-ChildItem "WinVLCBridge/build/bin/Release" -Recurse | Select-Object Name, Length
        } else {
          Write-Error "❌ 编译失败：找不到 WinVLCBridge.dll"
          exit 1
        }
      shell: powershell
        
    - name: 上传编译产物
      uses: actions/upload-artifact@v4
      with:
        name: WinVLCBridge-Release-x64
        path: |
          WinVLCBridge/build/bin/Release/WinVLCBridge.dll
          WinVLCBridge/build/bin/Release/libvlc.dll
          WinVLCBridge/build/bin/Release/libvlccore.dll
          WinVLCBridge/build/bin/Release/plugins/
        retention-days: 30
        
    - name: 创建 Release（仅在打 tag 时）
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          WinVLCBridge/build/bin/Release/WinVLCBridge.dll
          WinVLCBridge/build/bin/Release/libvlc.dll
          WinVLCBridge/build/bin/Release/libvlccore.dll
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

